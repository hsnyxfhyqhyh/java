package com.kang.ebook;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;

import com.kang.util.FileUtil;

/*
 * This is for quick extract book from  
 *  
 * In this site, chapter links start with a common prefix then appended with the chapter sequence
 * then appended with a common suffix.
 * 
 * The links array can be generated by viewing source of the first page, the 11th page .....
 * 
 * Finally write the pages in sequence to a file of html. 
 * 
 * 
 */
public class HhbBibleBook {
	//this is the html file going to be generated.
	private static String bookFileName = "nivbibleCn.html";
	private String[] links = null;
	
	
	private String prefix = "<table width=100%>";
	private String prefixreplace = "<table class=c width=100%>";
	
	private String suffix = "<td valign=top>&nbsp;</td>";
	
	private int chapterIntervals = 1500;
	
	private String bookDetail = ""; 
	
	public static void main(String[] args) {
		
		StringBuffer finalResult = new StringBuffer();
		//finalResult.append("<html> <body>");
		finalResult.append("<html> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=gb2312\" /><body>");
		for (int j=40 ; j<=66 ; j++) {
			HhbBibleBook ebook = new HhbBibleBook(j);
			finalResult.append(ebook.bookDetail);
		}
		finalResult.append("</body></html>");
		writeFile(finalResult.toString(), bookFileName);
		System.out.println("------Done-----");
	}
	
	

	public HhbBibleBook(int bookIndex) {
		String linkTemplate = "http://bible.kuanye.net/hhb/B%sC%s.htm";
		BibleDO bdo = new BibleDO(bookIndex);
		
		int chapterCount = bdo.getChapterCount();
		String bookName = bdo.getBookName();
				
		
		links = new String[chapterCount];
		for (int i=0; i<chapterCount; i++) {
			links[i] = String.format(linkTemplate, bookIndex, chapterNumberWithPrefix(i+1));
			System.out.println(links[i]);
		}
		

		
		StringBuffer bookResult = new StringBuffer();
		
		bookResult.append("<font class=b>" + bookName + "</font><BR>");
		for (int i=0; i< links.length; i++) {
			String link = (String) links[i];
			int chapterNumber = i +1;
			bookResult.append("<font class=cn>" + chapterNumber + "</font><BR>");
			
			try {
				String pageContent = getPageDetails(link);
				pageContent = pageContent.replaceAll(prefix, prefixreplace) ;
				pageContent = pageContent.replaceAll("<BR>", "")+ "</table>";
				bookResult.append("<p>");
				bookResult.append(pageContent);
				bookResult.append("<p>");

				Thread.sleep(chapterIntervals); // sleep for  mil-second before retrieving the page
									

			} catch (Exception e) {
				e.printStackTrace();
			}
			System.out.println("Done with " + link);
		}

		this.bookDetail = bookResult.toString();

		
	}

	

	/*
	 * Has the http link of a page, get the content as a formatted html
	 * string
	 */
	private String getPageDetails(String link) {
		String pageFullContent = getWebPageInFullHttpResponse(link);
		
		String pageContent = "";
		
		try {
			pageContent = getWebPart(pageFullContent, prefix, suffix);
		} catch(Exception e){
			
		}
		return pageContent;
	}

	private static void writeFile(String content, String filename) {
		try {
			PrintWriter out = new PrintWriter(new FileOutputStream(filename));

			out.print(content);
			out.flush();
			out.close();
			out = null;
		} catch (Exception e) {
		}
	}

	private String getWebPageInFullHttpResponse(String sitelink) {
		StringBuffer webPageBuffer = new StringBuffer();

		try {
			URL url = new URL(sitelink);

			URLConnection uc = url.openConnection();

			BufferedReader in = new BufferedReader(new InputStreamReader(uc
					.getInputStream()));
			String inputLine;

			while ((inputLine = in.readLine()) != null) {
				webPageBuffer.append("<BR>" + inputLine);
			}
			in.close();
		} catch (Exception e) {
			System.out.println("Error with link: " + sitelink);
		}

		return webPageBuffer.toString();
	}

	private String getWebPart(String input, String prefix, String suffix) {
		String part;

		int index = 0;

		index = input.lastIndexOf(prefix) ;

		input = input.substring(index);

		index = input.indexOf(suffix);

		part = input.substring(0, index);

		return part;
	}
	private static String chapterNumberWithPrefix(int chapterNumber){
		String cn = "" + chapterNumber ;
		while (cn.length() <3){
			cn = "0" + cn;
		}
		
		return cn;
	}

}
