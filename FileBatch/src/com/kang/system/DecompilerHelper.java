package com.kang.system;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;

import com.kang.util.ClientInteractionUtil;
import com.kang.util.DirectoryChooser;
import com.kang.util.FileUtil;
import com.kang.util.StringUtil;

/*
 * The main purpose of this class is to help rename the .jad files generated by djcompiler  
 * to .java files and delete the original .class files. When using the batch file it will popup 
 * a directory chooser dialog for choosing the root, then recursively navigate through all the 
 * files and directories. 
 * 
 * The result is logged to a file start with today's date and the suffix is "log"
 * 
 */
public class DecompilerHelper {

	//the file suffix is case sensitive
	private static String ORIG_FILE_SUFFIX_TO_RENAME_FROM = "jad";
	private static String DEST_FILE_SUFFIX_TO_RENAME_TO = "java";
	private static String DELETE_FILE_SUFFIX = "class";
	
	private static boolean DELETE_FLAG = true;
	private static boolean RENAME_FILE_TYPE_FLAG = true;
	
	private static boolean RECURSIVE_FLAG = true;
		
	private static String DEFAULT_DIRECTORY_ROOT = "C:\\";

	private static String log = "";
	
	/*
	 * program entry point
	 */
	public static void main(String[] args) {
		//choose the root directory
		DirectoryChooser dc = new DirectoryChooser();
		String dirname = dc.askForOpen(DEFAULT_DIRECTORY_ROOT);
		
		if (dirname==null) System.exit(0);
		
		//compose the confirm message
		String confirmMessage = "Root is: " + dirname + "\n\n";
		if (DELETE_FLAG) {
			confirmMessage += "The program will delete all " +  DELETE_FILE_SUFFIX + " files\n";
		}
		if (RENAME_FILE_TYPE_FLAG) {
			confirmMessage += "The program will rename all " + ORIG_FILE_SUFFIX_TO_RENAME_FROM 
							+ " files to " +  DEST_FILE_SUFFIX_TO_RENAME_TO + " files.\n";
		}
		confirmMessage += "Are you sure you want to proceed!\n";
		
		//0--yes; this means the client wants to proceed the task 
		//1--no
		int confirm = ClientInteractionUtil.ShowConfirmationDialogBox("Decompiler helper", confirmMessage);
		if (confirm>0) System.exit(0);

//		System.out.println("I am here");
		
		if (DELETE_FLAG) {
			println("######## Delete is turned on ###########");
		} else {
			println("######## Delete is turned off ###########");
		}
		if (RENAME_FILE_TYPE_FLAG) {
			println("######## rename file type is turned on ###########");
		} else {
			println("######## rename file type is turned off ###########");
		}
		
		visitDirectory(dirname);
		
		FileUtil.writeFile(log, StringUtil.getDateOfToday() + ".log");
		
		ClientInteractionUtil.ShowMessageDialogBox("Decompiler helper", "Task Done!");
		
		System.exit(0);
		
	}

	/*
	 * can recursively navigate through all the files and sub directories from the root 
	 */
	private static void visitDirectory(String dirname) {
		println("");
		
		//file here is actually directory
		File file = new File(dirname);

		println("Enter Directory: " + dirname);
		println("");
		
		//get all children of the directory, including all files and directory
		String str[] = file.list();
		
		//navigate through all children, child string value doesn't include full path
		for (int i = 0; i < str.length; i++) {
			String childpath = dirname + "\\" + str[i];
			File f = new File(childpath);
			
			if (f.isDirectory() & RECURSIVE_FLAG) {
				//recursive navigation all subdirectories if the flag is on
				visitDirectory(childpath);
			} else {
				try {
					if (DELETE_FLAG && childpath.endsWith(DELETE_FILE_SUFFIX)){
						println("Delete file: " + childpath);
						f.delete();
					} else {
						if (RENAME_FILE_TYPE_FLAG) {
							renameFileSuffix(childpath, ORIG_FILE_SUFFIX_TO_RENAME_FROM, DEST_FILE_SUFFIX_TO_RENAME_TO);
						}
					}
				} catch(Exception e){
					StringWriter sWriter = new StringWriter();
					e.printStackTrace(new PrintWriter(sWriter));
					println(sWriter.getBuffer().toString());
				}
			}
		}

	}

	/*
	 * rename the file type
	 */
	private static void renameFileSuffix(String filepath, String origSuffix, String newSuffix) throws IOException {

		File oldfile = new File(filepath);

		if (!oldfile.exists()) {
			println(filepath + " does not exist.");
		} else {
			if (filepath.endsWith("." + origSuffix)) {
				
				File newfile = new File(filepath.replace("." + origSuffix, "." + newSuffix));
				boolean Rename = oldfile.renameTo(newfile);
				
				if (!Rename) {
					println(filepath + " does not rename successfully.");
				} else {
					println("Rename file: " +  filepath + " \t\tTO\t\t " + newfile);
				}
			}
		}
	}
	
	/*
	 * controls the print out format
	 */
	private static void println(String entry) {
		log = log + entry + "\n";
	}
}
